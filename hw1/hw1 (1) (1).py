# -*- coding: utf-8 -*-
"""hw1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VUTuORswWRj0kqL4WtKzvuCBYJm8PHgB
"""

from google.colab import drive
drive.mount('/content/drive/')

path = '/content/drive/MyDrive/ColabNotebooks/movieRatingSample.txt'
path1 = '/content/drive/MyDrive/ColabNotebooks/genreMovieSample.txt'

"""Task 1.1"""

from collections import defaultdict
def read_ratings_data(f):
  lst = []
  lst_movies = []
  for line in open(f):
    name, rating, userid = line.split('|')

    lst.append((name.strip(), float(rating.strip())))
    lst_movies.append(name.strip())
  movie_rating_dict = defaultdict(list)
  for k,v in lst:
    movie_rating_dict[k].append(v)
  return dict(movie_rating_dict), lst_movies

a1,lst_m = read_ratings_data(path)
a1

"""Task 1.2"""

def read_movie_genre(f):
  lst1 = []
  for line in open(f):
    genre, rating, name = line.split('|')
    #name = name.strip()
    lst1.append((name.strip(), genre.strip()))
  genre_movie = defaultdict(str)
  for k,v in lst1:
    genre_movie[k] = v

  return dict(genre_movie)

dict_movie_to_genre = read_movie_genre(path1)


print(dict_movie_to_genre)

"""Task 2.1"""

def create_genre_dict(dict1):
  genre_movie = defaultdict(list)
  for k,v in dict1.items():
    genre_movie[v].append(k)
  return dict(genre_movie)

dict_genre = create_genre_dict(dict_movie_to_genre)
print(dict_genre)

"""Task 2.2"""

def calculate_average_rating(dictt_rating):
  lst_key = []
  val = []
  for k,v in dictt_rating.items():
    lst_key.append(k)
    val.append(round(sum(v) / len(v),2))
  return dict(zip(lst_key,val))

dict_avg_rating = calculate_average_rating(a1)

print(dict_avg_rating)

"""Task 3.1"""

def get_popular_movies(dict_avg_rating , n = 10):
  if len(dict_avg_rating) <= n:
    return dict(sorted(dict_avg_rating.items(), key = lambda x : x[1], reverse = True))
  else:
    dict_popular_sort = dict(sorted(dict_avg_rating.items(), key = lambda x : x[1], reverse = True))
    i = 0
    dict_popular_movie = {}

    for k,v in dict_popular_sort.items():
      if i != n:
        dict_popular_movie[k]=(v)
        i = i + 1
    return dict_popular_movie

genre_popular = get_popular_movies(dict_avg_rating)
print((genre_popular))

"""Task 3.2"""

def filter_movies(dict_avg_rating, threshold = 3):
  dict_popular_movie = {}
  
  for k,v in dict_avg_rating.items():
    if v > threshold:
      dict_popular_movie[k]=(v)
    else:
      continue
  return dict_popular_movie

filter_movies(dict_avg_rating)

"""Task 3.3"""

def get_popular_in_genre(genre, dict_genre, dict_avg_rating, n = 5):
  list_genre = dict_genre[genre]
  movie_to_avg_rating = {}
  dict_genre_sort = {}

  for k in list_genre:
    movie_to_avg_rating[k] = dict_avg_rating[k]

  if len(movie_to_avg_rating) > n:
    dict_genre_sort = {k: v for k, v in sorted(movie_to_avg_rating.items(), key=lambda item: item[1],reverse=True)}
    return dict_genre_sort
  
  else:
    return movie_to_avg_rating

get_popular_in_genre("Action", dict_genre, dict_avg_rating)

"""Task 3.4"""

def get_genre_rating(genre, dict_genre, dict_avg_rating):
  dict_get_genre_rating = {}
  #for k,v in dict_genre.items():
  list_genre = dict_genre[genre]

  rating_genre = []
  for movie in list_genre:
    rating_genre.append(dict_avg_rating[movie])
    dict_get_genre_rating[genre] = round(sum(rating_genre) / len(rating_genre),2)
  return dict_get_genre_rating

get_genre_rating("Comedy", dict_genre, dict_avg_rating)

"""Task 3.5"""

def get_genre_ratingg(dict_genre, dict_avg_rating):
  dict_get_genre_rating = {}
  for k,v in dict_genre.items():
    #list_genre = dict_genre[genre]

    rating_genre = []
    for j in v:
      rating_genre.append(dict_avg_rating[j])
      dict_get_genre_rating[k] = round(sum(rating_genre) / len(rating_genre),2)
  return dict_get_genre_rating

dict_genre_rating = get_genre_ratingg(dict_genre, dict_avg_rating)

dict_genre_rating

def genre_popularity(dict_genre, dict_avg_rating, dict_genre_rating, n=5): #default
  if len(dict_genre_rating) < n:
    return sorted(dict_genre_rating.items(), key=lambda x : x[1], reverse = True)

dict_genre_popularity = genre_popularity(dict_genre, dict_avg_rating, dict_genre_rating)

print(dict(dict_genre_popularity))

"""Task 4.1"""

from collections import defaultdict

def read_user_ratings(f):
    lst1 = []
    for line in open(f):
        name, rating, userid = line.split('|')
        tup = (userid.strip(), name.strip(), float(rating.strip()))
        lst1.append(tup)
   
    movie_rating_dict = defaultdict(list)
    for k,u,v in lst1:
        movie_rating_dict[k].append((u,v))
        
    return dict(movie_rating_dict)

dict_user_to_movies = read_user_ratings(path)

dict_user_to_movies

"""Task 4.2"""

def get_user_genre(userid, dict_user_to_movies, dict_movie_to_genre):
    list_movies = dict_user_to_movies[userid]
    #print(list_movies)
    
    genre_movie = defaultdict(list)
    for tup in list_movies:
        g_name = dict_movie_to_genre[tup[0]]
        rating = tup[1]
        genre_movie[g_name].append(rating)
        
    lst_key = []
    val = []
    for k,v in genre_movie.items():
        lst_key.append(k)
        val.append(round(np.array(v).mean(),2))
    dict2 = dict(zip(lst_key,val))
    
    dict2_sort = dict(sorted(dict2.items(), key=lambda x : x[1], reverse = True))
    user_top_rated_genre = list(dict2_sort.keys())[0]
    return user_top_rated_genre

get_user_genre('8', dict_user_to_movies, dict_movie_to_genre)

"""Task 4.3"""

def recommend_movies(lst_m, dict_user_to_movies, userid, dict_movie_to_genre, dict_avg_rating):
  lst_m = list(set(lst_m))
  lst_usermovies = dict_user_to_movies[userid]

  for i in lst_usermovies:
    lst_m.remove(i)
  
  lst = []
  for movie in lst_m:
    val = dict_avg_rating[movie]
    lst.append((movie, val))
  lst_sort = sorted(lst, key = lambda x: x[1], reverse = True)

  lst_top3 = []
  kk = 0
  for k in lst_sort:
    if kk !=3:
      lst_top3.append(k)
      kk = kk+1
    else:
      break
  return lst_top3

dict(recommend_movies(lst_m, dict_user_to_movies, '84', dict_movie_to_genre, dict_avg_rating))